<?phpuse App\Exception\EmptyStackException;use App\Exception\NullElementException;use PHPUnit\Framework\TestCase;use App\Service\FirstTask\Stack;class StackTest extends TestCase{    private Stack $stack;    private string $newItem = 'New Item';    private array $items = [        'item1', 'item2', 'item3', 'item4', 'item5'    ];    protected function setUp(): void    {        parent::setUp();        $this->stack = new Stack();    }    public function testStackInitialization(): void    {        $this->assertEquals(0, $this->stack->size());        $this->assertTrue($this->stack->empty());    }    /**     * @throws NullElementException     */    public function testAddNewItem(): void    {        $this->stack->push('New Item');        $this->assertEquals(1, $this->stack->size());        $this->assertFalse($this->stack->empty());    }    /**     * @throws NullElementException|EmptyStackException     */    public function testAddNewItemAndPopIt(): void    {        $this->stack->push($this->newItem);        $item = $this->stack->pop();        $this->assertEquals($this->newItem, $item);        $this->assertEquals(0, $this->stack->size());        $this->assertTrue($this->stack->empty());    }    /**     * @throws NullElementException     */    public function testAddNewItemWithNullAndExpectException(): void    {        $this->expectException(NullElementException::class);        $this->expectExceptionMessage('Supplied element is null');        $this->stack->push(null);    }    /**     * @throws EmptyStackException     */    public function testPopAnEmptyStackAndExpectException(): void    {        $this->expectException(EmptyStackException::class);        $this->expectExceptionMessage('Stack is empty!');        $this->stack->pop();    }    /**     * @throws NullElementException|EmptyStackException     */    public function testAddNewItemAndPeekIt(): void    {        $this->stack->push($this->newItem);        $item = $this->stack->peek();        $this->assertEquals($this->newItem, $item);        $this->assertEquals(1, $this->stack->size());        $this->assertFalse($this->stack->empty());    }    /**     * @throws EmptyStackException     */    public function testPeekAnEmptyStackAndExpectException(): void    {        $this->expectException(EmptyStackException::class);        $this->expectExceptionMessage('Stack is empty!');        $this->stack->peek();    }    /**     * @throws NullElementException     */    public function testAddMultipleItemsAndGetSizeOfThem(): void    {        foreach ($this->items as $item) {            $this->stack->push($item);        }        $this->assertEquals(count($this->items), $this->stack->size());    }    /**     * @throws NullElementException     */    public function testAddMultipleItemsAndCheckIfStackIsNotEmpty(): void    {        foreach ($this->items as $item) {            $this->stack->push($item);        }        $this->assertFalse($this->stack->empty());    }    /**     * @throws NullElementException     * @throws EmptyStackException     */    public function testAddMultipleItemsAndPopTopElement(): void    {        foreach ($this->items as $item) {            $this->stack->push($item);        }        $topElement = $this->stack->pop();        $this->assertEquals($this->items[4], $topElement);        // it should be 4 items because we popped up an item.        $this->assertEquals(count($this->items) - 1, $this->stack->size());    }    /**     * @throws NullElementException     * @throws EmptyStackException     */    public function testAddMultipleItemsAndPeekTopElement(): void    {        foreach ($this->items as $item) {            $this->stack->push($item);        }        $topElement = $this->stack->peek();        $this->assertEquals($this->items[4], $topElement);        // it should be 5 items because there is no change.        $this->assertEquals(count($this->items), $this->stack->size());    }    /**     * @throws NullElementException     * @throws EmptyStackException     */    public function testAddMultipleItemsAndPopAllOfThem(): void    {        $poppedItems = [];        foreach ($this->items as $item) {            $this->stack->push($item);        }        for ($i = 0; $i < count($this->items); $i++) {            $poppedItems[$i] = $this->stack->pop();        }        $this->assertSame($this->items, array_reverse($poppedItems));        $this->assertSameSize($this->items, $poppedItems);        $this->assertEquals(0, $this->stack->size());        $this->assertTrue($this->stack->empty());    }}