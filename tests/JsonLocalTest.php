<?phpuse App\Entity\Product;use App\Format\JsonFormat;use App\Storage\FileStorage;use PHPUnit\Framework\TestCase;use \App\Interface\FormatInterface;use \App\Interface\EntityInterface;use \App\Exception\NotFoundException;use App\Collection\ProductCollection;class JsonLocalTest extends TestCase{    private FormatInterface $format;    private EntityInterface $entity;    protected function setUp(): void    {        parent::setUp();        $fileStorage = new FileStorage('cache/database.json');        $this->entity = $this->createNewEntity();        $this->format = new JsonFormat($fileStorage);    }    private function createNewEntity(        string $title = null,        string $description = null,        string $category = null    ): EntityInterface    {        return new Product(            id: rand(1, 20000) * rand(1, 200),            title: !$title ? $this->generateRandomString() : $title,            description: !$description ? $this->generateRandomString() : $description,            category: !$category ? $this->generateRandomString() : $category,            price: 12000        );    }    private function generateRandomString($length = 10)    {        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';        $charactersLength = strlen($characters);        $randomString = '';        for ($i = 0; $i < $length; $i++) {            $randomString .= $characters[rand(0, $charactersLength - 1)];        }        return $randomString;    }    public function testInsertNewItem(): void    {        $result = $this->format->insert($this->entity);        $this->assertTrue($result);    }    public function testFindById(): void    {        $result = $this->format->insert($this->entity);        $this->assertTrue($result);        $item = $this->format->findById($this->entity->getId());        $this->assertInstanceOf(EntityInterface::class, $item);    }    public function testUpdateById(): void    {        $result = $this->format->insert($this->entity);        $this->assertTrue($result);        $newTitle = 'Benz';        $this->entity->setTitle($newTitle);        $result = $this->format->updateById($this->entity->getId(), $this->entity);        $this->assertTrue($result);        $item = $this->format->findById($this->entity->getId());        $this->assertInstanceOf(EntityInterface::class, $item);        $this->assertEquals($newTitle, $item->getTitle());    }    public function testInsertNewItemAndRemoveIt(): void    {        $this->expectException(NotFoundException::class);        $result = $this->format->insert($this->entity);        $this->assertTrue($result);        $this->format->deleteById($this->entity->getId());        $this->format->findById($this->entity->getId());    }    public function testBatchInsert(): void    {        $collection = new ProductCollection();        for ($i = 0; $i < 10; $i++) {            $collection->add($this->createNewEntity());        }        $result = $this->format->batchInsert($collection);        $this->assertTrue($result);        $this->assertEquals($collection->count(), $this->format->count());    }    public function testBatchInsertAndFindAll(): void    {        $collection = new ProductCollection();        for ($i = 0; $i < 50; $i++) {            $collection->add($this->createNewEntity());        }        $this->format->batchInsert($collection);        $result = $this->format->findAll();        $this->assertInstanceOf(Iterator::class, $result);        $this->assertEquals($collection->count(), $result->count());    }    public function testInsertAndFilterToOneCategory(): void    {        $collection = new ProductCollection();        for ($i = 0; $i < 10; $i++) {            $collection->add($this->createNewEntity(category: 'PC'));        }        $laptops = 15;        for ($i = 0; $i < $laptops; $i++) {            $collection->add($this->createNewEntity(category: 'Laptop'));        }        $this->format->batchInsert($collection);        $items = $this->format->where([            'category' => 'Laptop'        ])->get();        $this->assertInstanceOf(Iterator::class, $items);        $this->assertEquals($laptops, $items->count());    }    public function testInsertAndDeleteWithFilter(): void    {        $collection = new ProductCollection();        $pcs = 10;        for ($i = 0; $i < $pcs; $i++) {            $collection->add($this->createNewEntity(category: 'PC'));        }        $laptops = 15;        for ($i = 0; $i < $laptops; $i++) {            $collection->add($this->createNewEntity(category: 'Laptop'));        }        $this->format->batchInsert($collection);        // remove laptop products        $items = $this->format->where([            'category' => 'Laptop'        ])->delete();        $this->assertEquals($pcs, $this->format->findAll()->count());        $this->assertTrue($items);    }    public function testFilterAndCountTheResult(): void    {        $collection = new ProductCollection();        $pcs = 20;        for ($i = 0; $i < $pcs; $i++) {            $collection->add($this->createNewEntity(category: 'PC'));        }        $laptops = 15;        for ($i = 0; $i < $laptops; $i++) {            $collection->add($this->createNewEntity(category: 'Laptop'));        }        $this->format->batchInsert($collection);        // filter to only pc categories        $pcsCounted = $this->format->where([            'category' => 'PC'        ])->count();        $this->assertIsNumeric($pcsCounted);        $this->assertEquals($pcs, $pcsCounted);    }    public function testFilterWithLimit(): void    {        $collection = new ProductCollection();        $pcs = 20;        for ($i = 0; $i < $pcs; $i++) {            $collection->add($this->createNewEntity(category: 'PC'));        }        $this->format->batchInsert($collection);        $limitedResult = 5;        // filter to only pc categories        $items = $this->format->where([            'category' => 'PC'        ])->limit($limitedResult)->get();        $this->assertEquals($items->count(), $limitedResult);    }    public function testFilterWithOffset(): void    {        $collection = new ProductCollection();        $pcs = 20;        for ($i = 0; $i < $pcs; $i++) {            $collection->add($this->createNewEntity(category: 'PC'));        }        $this->format->batchInsert($collection);        // filter to only pc categories        $items = $this->format->where([            'category' => 'PC'        ])->offset(10)->get();        $this->assertEquals($items->count(), $pcs / 2);    }    public function testFilterWithOffsetAndLimit(): void    {        $collection = new ProductCollection();        $pcs = 100;        for ($i = 0; $i < $pcs; $i++) {            $collection->add($this->createNewEntity(category: 'PC'));        }        $this->format->batchInsert($collection);        // filter to only pc categories        $items = $this->format->where([            'category' => 'PC'        ])->offset(90)->limit(10)->get();        $this->assertEquals($items->count(), 10);    }    protected function tearDown(): void    {        $this->format->flush();        parent::tearDown();    }}